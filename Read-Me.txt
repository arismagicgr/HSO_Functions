Για να χρησιμοποιήσεις τα functions, πρέπει να βάλεις αυτόν τον φάκελο
μέσα στον φάκελο της αποσοτλής όπως στον έστειλα και θα πρέπει επίσης
στο description.ext να φτιάξεις (αν δεν έχεις ήδη) μία κλάση CfgFunctions και να κάνεις
#include το HSO_Functions.hpp. Αυτό γίνεται έτσι:

#include "HSO_Functions\HSO_Functions.hpp"

άρα τελικά μέσα στο description.ext θα πρέπει να έχεις
(τουλάχιστον) αυτό:

class CfgFunctions {
#include "HSO_Functions\HSO_Functions.hpp"
};


Για να δουλέψει όλο το σύστημα με τα QRFs θα πρέπει να γίνουν τα παρακάτω βήματα:

1) Να τοποθετήσεις σε κάποιο σημείο του χάρτη (γενικά μακριά από παίκτες και σε κάποιο
σημείο που δεν θα έχει να κάνει με την αποστολή) ένα object τύπου "Game Logic", να
προσθέσεις στο init field του το παρακάτω function

[this] call HSO_fnc_groupCompiler;

και να "συγχρονίσεις" με μία έστω μονάδα από κάθε group που θέλεις να χρησιμοποιηθεί ως QRF Group.
Τα groups που θα συγχρονίσεις, θα χρησιμοποιηθούν ΑΥΤΟΥΣΙΑ ως πιθανά QRF Groups. Δηλαδή:
Και ο αριθμός των units, και τα classNames αλλά και τα loadouts τους, θα είναι ΑΚΡΙΒΩΣ
όπως θα τα ορίσεις στον editor. Από όσα groups συγχρονίσεις με το object, όταν γίνει
κλήση για QRF από κάποιο group, το function θα διαλέξει ένα στην τύχη και θα το κάνει
spawn στο κοντινότερο σημείο από αυτά που θα έχουν οριστεί
με το HSO_fnc_registerHelper function (δες παρακάτω).
Για την ώρα, (δυστυχώς) λειτουργούν μόνο για units (πεζικό) και όχι για vehicles τα functions.
Έτσι, θα δημιουργήσεις την "δεξαμενή" με τα "είδη" των groups από τα οποία θα διαλέγει τυχαία το function που θα κάνει
spawn τα QRFs.

2) Θα πρέπει να τοποθετήσεις σε σημεία που θα θέλεις να γίνονται spawn οι QRFs
"Game Logic" objects (ή οποιοδήποτε άλλο object) και στο init field του να βάλεις
αυτό:

[this] call HSO_fnc_registerHelper;

με αυτό τον τρόπο, αυτό το αντικείμενο θα προστεθεί σε μία "δεξαμενή" με πιθανά
QRF Spawn Positions. Το function θα διαλέγει το κοντινότερο σημείο από το σημείο
στο οποίο βρίσκεται ο group leader του group που κάλεσε QRF. Είναι εφικτό ακόμη
και να χρησιμοποιήσεις και object το οποίο θα κινείται (π.χ. ένα εχθρικό όχημα)
ως QRF Spawn Position με αυτό τον τρόπο.


3) Αν έχεις τοποθετήσει groups στον editor και θέλεις να τα συμπεριλάβεις όλα στο
QRF System, πρόσθεσε το παρακάτω function στο initServer.sqf (ή στο init.sqf μιας
και το έχω ορίσει να εκτελείται μόνο στον Server).

[] call HSO_fnc_initQRFSystemForPreplacedGroups;

Αν όμως δεν θέλεις να είναι σε όλα τα groups τότε θα πρέπει να προσθέσεις το παρακάτω
function στο init field του κάθε group (προσοχή, group, όχι unit του group).

[this] call HSO_fnc_callQRFEH;

4) Αν θέλεις ΟΛΑ τα groups που θα γίνονται spawn κατά τη διάρκεια της αποστολής να
συμπεριλαμβάνοντε αυτόματα στο QRF System τότε, πρόσθεσε το παρακάτω function στο
initServer.sqf (ή πάλι στο init.sqf μιας και αυτό εκτελείται μόνο στον Server).

[] call HSO_fnc_initQRFSystem;



///////////////////////////////////////////////////////////////////////////////////
Αν οποιαδήποτε στιγμή θέλεις να απενεργοποιήσεις την δυνατότητα κάποιου group να
καλέσει QRF, θέσε ως false την μεταβλητή "canCallQRF" στο namespace του group με
τον παρακάτω τρόπο:

_group setVariable ["canCallQRF", false, true];

Αυτό μπορεί να γίνει από τον editor από το init field είτε του group, είτε κάποιου
unit που ανήκει στο group. Αν δεν κάνω λάθος και το Zeus Enhanced δίνει τη δυνατότητα
να εκτελέσεις κώδικα σε κάποιο object. Απλά να θυμάσει πως "παίρνεις" κάθε φορά το
group (π.χ. από το init field του group θα το πάρεις ως "this", ενώ από το init field
κάποιου unit που ανήκει στο group θα το πάρεις ως "group this" κ.λπ.).



///////////////////////////////////////////////////////////////////////////////////
Κάθε group, μπορεί να καλέσει μόνο ένα QRF!
ΠΡΟΣΟΧΗ:
Το QRF καλείται από το !group! και όχι από τα units. Αυτό σημαίνει πως ένα group με
100 units αλλά και ένα group με 1 unit μπορούν να καλέσουν QRF μόνο 1 φορά.
Αυτό θέλει λίγη προσοχή σε περίπτωση που υπάρχουν πολλά groups με 1 unit που
μπορεί να έχουν τοποθετηθεί ως "σκοποί". Κάθε ένας "σκοπός" θα μπορεί να καλεί και από
ένα QRF. Αυτό μπορεί να σημαίνει πως μπορεί να κλιθούν πολυάρθιμα QRFs.

ΠΡΟΣΟΧΗ #2:
Το QRF System ΔΕΝ απενεργοποιείται σε περίπτωση που "σημάνει συναγερμός". Κάθε ένα group
που έχει οριστεί να έχει δυνατότητα κλήσης QRF, ΘΑ ΚΑΛΕΣΕΙ QRF όταν αναγνωρίσει έναν εχθρό!!!

////////////////////////////////////// DEFAULT ΤΙΜΕΣ /////////////////////////////////////////
Χρόνος κλήσης QRF: 15 δευτερόλεπτα.
Τα QRF Groups καλούν και αυτά με τη σειρά τους ενισχύσεις αν αναγνωρίσουν εχθρούς και δεν
εξουδετερωθούν πριν τον "Χρόνο Κλήσης QRF".

///////////////////////////////////// MISSION PARAMETERS ////////////////////////////////////////
Έχω ετοιμάσει κάποιες mission parameters για να συμπεριλάβεις στο description.ext
που τροποποιούν τις παραπάνω default τιμές.

Για να τις συμπεριλάβεις θα πρέπει να φτιάξεις (αν δεν έχεις ήδη) μία κλάση Params (class Params)
και εκεί να κάνεις #include τις παραμέτρους αυτές. Τελικά θα πρέπει να είναι κάπως έτσι:

class Params {
  #include "HSO_Functions\params\alertTime.hpp"
  #include "HSO_Functions\params\canCallQRF.hpp"
};
